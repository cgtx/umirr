import copy
import json
import six
import falcon
from .utils import calculate_distance


class MainResource:
    def on_get(self, req, resp):
        resp.body = '<html><h1>umirr</h1><h2>mirco mirror service</h2></html>'


class SettingsResource:
    ''' Expose application settings. '''
    def __init__(self, settings):
        self.settings = settings

    def on_get(self, req, resp):
        resp.body = json.dumps(self.settings)


class MirrorsResource:
    ''' Expose mirror data. '''
    def __init__(self, settings, mirrors):
        self.mirrors = copy.deepcopy(mirrors)
        if settings.get('mirrors').get('hide_owners'):
            for host in self.mirrors:
                del self.mirrors[host]['owner']
                del self.mirrors[host]['contact']

    def on_get(self, req, resp):
        resp.body = json.dumps(self.mirrors)


class MirrorListResource:
    ''' Generate list of mirrors relative to requestor's location. '''
    def __init__(self, settings, mirrors):
        self.settings = settings
        self.mirrors = {host: data for host, data in six.iteritems(mirrors)
                        if data.get('enabled')}

    def validate(self, req):
        ''' Parse request parameters and validate them. '''
        valid_repos = self.settings.get('repos')
        valid_arches = self.settings.get('arches')
        valid_protocols = self.settings.get('protocols')
        repo = req.get_param('repo', required=True)
        if repo not in valid_repos:
            raise falcon.HTTPInvalidParam('({})'.format(repo), 'repo')
        arch = req.get_param('arch', required=True)
        if arch not in valid_arches:
            raise falcon.HTTPInvalidParam('({})'.format(arch), 'arch')
        protocol = req.get_param('protocol') or valid_protocols[0]
        if protocol not in valid_protocols:
            raise falcon.HTTPInvalidParam('({})'.format(protocol), 'protocol')
        src = (req.get_header('X-Forwarded-For-Latitude'),
               req.get_header('X-Forwarded-For-Longitude'))
        if None in src:
            # coordinates are missing, set the source to center of the U.S.
            src = (39.0, -98.0)
        return repo, arch, protocol, src

    def find_mirrors(self, repo, arch, protocol, src):
        mirrorlist = []
        for host, data in six.iteritems(self.mirrors):
            resource = data.get('resources').get(protocol)
            if resource:
                dst = (data.get('coordinates').get('latitude'),
                       data.get('coordinates').get('longitude'))
                distance = calculate_distance(src, dst)
                path = self.settings.get('repos').get(repo)
                url = '{}://{}/{}/{}/'.format(protocol,
                                              host,
                                              resource.strip('/'),
                                              path.strip('/'))
                mirrorlist.append((distance,
                                   host,
                                   url.replace('@arch@', arch)))
        mirrorlist.sort()    
        return mirrorlist

    def on_get(self, req, resp):
        repo, arch, protocol, src = self.validate(req)
        output = []
        if self.settings.get('app').get('show_header'):
            output.append('# mirrorlist generated by umirr')
            output.append('#')
        if self.settings.get('app').get('show_source'):
            msg = '# ordered for {}, {} {} ({})'
            source = req.get_header('X-Forwarded-For').split(',')[0]
            formatted = msg.format(req.get_header('X-Forwarded-For-City'),
                                   req.get_header('X-Forwarded-For-Region'),
                                   req.get_header('X-Forwarded-For-Country'),
                                   source)
            output.append(formatted)
            output.append('#')
        src = (req.get_header('X-Forwarded-For-Latitude'),
               req.get_header('X-Forwarded-For-Longitude'))
        mirrors = self.find_mirrors(repo, arch, protocol, src)
        if self.settings.get('app').get('show_distances'):
            msg = ['# approximate distances:']
            urls = []
            for distance, host, url in mirrors:
                msg.append('#    {} - {} miles away'.format(host, distance))
                urls.append(url)
            output.extend(msg)
            output.append('#')
            output.extend(urls)
        else:
            for distance, host, url in mirrors:
                output.append(url)
        resp.content_type = 'text/plain'
        resp.body = '\n'.join(output)
